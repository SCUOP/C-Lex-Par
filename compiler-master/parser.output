Terminals unused in grammar

    K_PRINTF
    K_READ
    COMMENT
    SPACES
    U_LEGAL
    '+'
    '-'
    '*'
    '/'
    U_neg


State 100 conflicts: 1 shift/reduce
State 101 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: declaration_list

    2 declaration_list: declaration declaration_list
    3                 | declaration

    4 declaration: var_declaration
    5            | fun_declaration

    6 var_declaration: type_specifier ID O_SEMI
    7                | type_specifier ID O_LMBRACKER NUM O_RMBRACKER O_SEMI

    8 fun_declaration: type_specifier ID O_LSBRACKER params O_RSBRACKER compound_stmt

    9 compound_stmt: O_LLBRACKER local_declaration statement_list O_RLBRACKER

   10 type_specifier: K_INT
   11               | K_VOID

   12 params: param_list
   13       | ε

   14 param_list: param O_COMMA param_list
   15           | param

   16 param: type_specifier ID
   17      | type_specifier ID O_LMBRACKER O_RMBRACKER

   18 local_declaration: var_declaration local_declaration
   19                  | ε

   20 statement_list: ε
   21               | statement statement_list

   22 statement: expression_stmt
   23          | compound_stmt
   24          | selection_stmt
   25          | iteration_stmt
   26          | return_stmt

   27 expression_stmt: expression O_SEMI
   28                | O_SEMI

   29 selection_stmt: matched_if
   30               | unmatched_if

   31 matched_if: K_IF O_LSBRACKER expression O_RSBRACKER statement K_ELSE statement

   32 unmatched_if: K_IF O_LSBRACKER expression O_RSBRACKER statement
   33             | K_IF O_LSBRACKER expression O_RSBRACKER matched_if K_ELSE unmatched_if

   34 iteration_stmt: K_WHILE O_LSBRACKER expression O_RSBRACKER statement

   35 expression: var O_ASSIGN expression
   36           | simple_expression

   37 return_stmt: K_RETURN expression O_SEMI
   38            | K_RETURN O_SEMI

   39 var: ID
   40    | ID O_LMBRACKER expression O_RMBRACKER

   41 simple_expression: additive_expression relop additive_expression
   42                  | additive_expression

   43 relop: O_L_EQUAL
   44      | O_LESS
   45      | O_GREATER
   46      | O_G_EQUAL
   47      | O_EQUAL
   48      | O_U_EQUAL

   49 additive_expression: term addop additive_expression
   50                    | term

   51 addop: O_ADD
   52      | O_SUB

   53 term: factor mulop term
   54     | factor

   55 mulop: O_MUL
   56      | O_DIV

   57 factor: O_LSBRACKER expression O_RSBRACKER
   58       | var
   59       | call
   60       | NUM

   61 call: ID O_LSBRACKER args O_RSBRACKER

   62 args: arg_list
   63     | ε

   64 arg_list: expression O_COMMA arg_list
   65         | expression


Terminals, with rules where they appear

    $end (0) 0
    '*' (42)
    '+' (43)
    '-' (45)
    '/' (47)
    error (256)
    K_ELSE <node> (258) 31 33
    K_IF <node> (259) 31 32 33
    K_RETURN <node> (260) 37 38
    K_WHILE <node> (261) 34
    K_PRINTF <node> (262)
    K_READ <node> (263)
    K_INT <node> (264) 10
    K_VOID <node> (265) 11
    ID <node> (266) 6 7 8 16 17 39 40 61
    NUM <node> (267) 7 60
    O_ASSIGN <node> (268) 35
    O_COMMA <node> (269) 14 64
    O_SEMI <node> (270) 6 7 27 28 37 38
    O_LSBRACKER <node> (271) 8 31 32 33 34 57 61
    O_RSBRACKER <node> (272) 8 31 32 33 34 57 61
    O_LMBRACKER <node> (273) 7 17 40
    O_RMBRACKER <node> (274) 7 17 40
    O_LLBRACKER <node> (275) 9
    O_RLBRACKER <node> (276) 9
    O_ADD <node> (277) 51
    O_SUB <node> (278) 52
    O_MUL <node> (279) 55
    O_DIV <node> (280) 56
    O_LESS <node> (281) 44
    O_L_EQUAL <node> (282) 43
    O_GREATER <node> (283) 45
    O_G_EQUAL <node> (284) 46
    O_EQUAL <node> (285) 47
    O_U_EQUAL <node> (286) 48
    COMMENT <node> (287)
    SPACES <node> (288)
    U_LEGAL <node> (289)
    U_neg (290)


Nonterminals, with rules where they appear

    $accept (40)
        on left: 0
    program <node> (41)
        on left: 1
        on right: 0
    declaration_list <node> (42)
        on left: 2 3
        on right: 1 2
    declaration <node> (43)
        on left: 4 5
        on right: 2 3
    var_declaration <node> (44)
        on left: 6 7
        on right: 4 18
    fun_declaration <node> (45)
        on left: 8
        on right: 5
    compound_stmt <node> (46)
        on left: 9
        on right: 8 23
    type_specifier <node> (47)
        on left: 10 11
        on right: 6 7 8 16 17
    params <node> (48)
        on left: 12 13
        on right: 8
    param_list <node> (49)
        on left: 14 15
        on right: 12 14
    param <node> (50)
        on left: 16 17
        on right: 14 15
    local_declaration <node> (51)
        on left: 18 19
        on right: 9 18
    statement_list <node> (52)
        on left: 20 21
        on right: 9 21
    statement <node> (53)
        on left: 22 23 24 25 26
        on right: 21 31 32 34
    expression_stmt <node> (54)
        on left: 27 28
        on right: 22
    selection_stmt <node> (55)
        on left: 29 30
        on right: 24
    matched_if <node> (56)
        on left: 31
        on right: 29 33
    unmatched_if <node> (57)
        on left: 32 33
        on right: 30 33
    iteration_stmt <node> (58)
        on left: 34
        on right: 25
    expression <node> (59)
        on left: 35 36
        on right: 27 31 32 33 34 35 37 40 57 64 65
    return_stmt <node> (60)
        on left: 37 38
        on right: 26
    var <node> (61)
        on left: 39 40
        on right: 35 58
    simple_expression <node> (62)
        on left: 41 42
        on right: 36
    relop <node> (63)
        on left: 43 44 45 46 47 48
        on right: 41
    additive_expression <node> (64)
        on left: 49 50
        on right: 41 42 49
    addop <node> (65)
        on left: 51 52
        on right: 49
    term <node> (66)
        on left: 53 54
        on right: 49 50 53
    mulop <node> (67)
        on left: 55 56
        on right: 53
    factor <node> (68)
        on left: 57 58 59 60
        on right: 53 54
    call <node> (69)
        on left: 61
        on right: 59
    args <node> (70)
        on left: 62 63
        on right: 61
    arg_list <node> (71)
        on left: 64 65
        on right: 62 64


State 0

    0 $accept: • program $end

    K_INT   shift, and go to state 1
    K_VOID  shift, and go to state 2

    program           go to state 3
    declaration_list  go to state 4
    declaration       go to state 5
    var_declaration   go to state 6
    fun_declaration   go to state 7
    type_specifier    go to state 8


State 1

   10 type_specifier: K_INT •

    $default  reduce using rule 10 (type_specifier)


State 2

   11 type_specifier: K_VOID •

    $default  reduce using rule 11 (type_specifier)


State 3

    0 $accept: program • $end

    $end  shift, and go to state 9


State 4

    1 program: declaration_list •

    $default  reduce using rule 1 (program)


State 5

    2 declaration_list: declaration • declaration_list
    3                 | declaration •

    K_INT   shift, and go to state 1
    K_VOID  shift, and go to state 2

    $default  reduce using rule 3 (declaration_list)

    declaration_list  go to state 10
    declaration       go to state 5
    var_declaration   go to state 6
    fun_declaration   go to state 7
    type_specifier    go to state 8


State 6

    4 declaration: var_declaration •

    $default  reduce using rule 4 (declaration)


State 7

    5 declaration: fun_declaration •

    $default  reduce using rule 5 (declaration)


State 8

    6 var_declaration: type_specifier • ID O_SEMI
    7                | type_specifier • ID O_LMBRACKER NUM O_RMBRACKER O_SEMI
    8 fun_declaration: type_specifier • ID O_LSBRACKER params O_RSBRACKER compound_stmt

    ID  shift, and go to state 11


State 9

    0 $accept: program $end •

    $default  accept


State 10

    2 declaration_list: declaration declaration_list •

    $default  reduce using rule 2 (declaration_list)


State 11

    6 var_declaration: type_specifier ID • O_SEMI
    7                | type_specifier ID • O_LMBRACKER NUM O_RMBRACKER O_SEMI
    8 fun_declaration: type_specifier ID • O_LSBRACKER params O_RSBRACKER compound_stmt

    O_SEMI       shift, and go to state 12
    O_LSBRACKER  shift, and go to state 13
    O_LMBRACKER  shift, and go to state 14


State 12

    6 var_declaration: type_specifier ID O_SEMI •

    $default  reduce using rule 6 (var_declaration)


State 13

    8 fun_declaration: type_specifier ID O_LSBRACKER • params O_RSBRACKER compound_stmt

    K_INT   shift, and go to state 1
    K_VOID  shift, and go to state 2

    $default  reduce using rule 13 (params)

    type_specifier  go to state 15
    params          go to state 16
    param_list      go to state 17
    param           go to state 18


State 14

    7 var_declaration: type_specifier ID O_LMBRACKER • NUM O_RMBRACKER O_SEMI

    NUM  shift, and go to state 19


State 15

   16 param: type_specifier • ID
   17      | type_specifier • ID O_LMBRACKER O_RMBRACKER

    ID  shift, and go to state 20


State 16

    8 fun_declaration: type_specifier ID O_LSBRACKER params • O_RSBRACKER compound_stmt

    O_RSBRACKER  shift, and go to state 21


State 17

   12 params: param_list •

    $default  reduce using rule 12 (params)


State 18

   14 param_list: param • O_COMMA param_list
   15           | param •

    O_COMMA  shift, and go to state 22

    $default  reduce using rule 15 (param_list)


State 19

    7 var_declaration: type_specifier ID O_LMBRACKER NUM • O_RMBRACKER O_SEMI

    O_RMBRACKER  shift, and go to state 23


State 20

   16 param: type_specifier ID •
   17      | type_specifier ID • O_LMBRACKER O_RMBRACKER

    O_LMBRACKER  shift, and go to state 24

    $default  reduce using rule 16 (param)


State 21

    8 fun_declaration: type_specifier ID O_LSBRACKER params O_RSBRACKER • compound_stmt

    O_LLBRACKER  shift, and go to state 25

    compound_stmt  go to state 26


State 22

   14 param_list: param O_COMMA • param_list

    K_INT   shift, and go to state 1
    K_VOID  shift, and go to state 2

    type_specifier  go to state 15
    param_list      go to state 27
    param           go to state 18


State 23

    7 var_declaration: type_specifier ID O_LMBRACKER NUM O_RMBRACKER • O_SEMI

    O_SEMI  shift, and go to state 28


State 24

   17 param: type_specifier ID O_LMBRACKER • O_RMBRACKER

    O_RMBRACKER  shift, and go to state 29


State 25

    9 compound_stmt: O_LLBRACKER • local_declaration statement_list O_RLBRACKER

    K_INT   shift, and go to state 1
    K_VOID  shift, and go to state 2

    $default  reduce using rule 19 (local_declaration)

    var_declaration    go to state 30
    type_specifier     go to state 31
    local_declaration  go to state 32


State 26

    8 fun_declaration: type_specifier ID O_LSBRACKER params O_RSBRACKER compound_stmt •

    $default  reduce using rule 8 (fun_declaration)


State 27

   14 param_list: param O_COMMA param_list •

    $default  reduce using rule 14 (param_list)


State 28

    7 var_declaration: type_specifier ID O_LMBRACKER NUM O_RMBRACKER O_SEMI •

    $default  reduce using rule 7 (var_declaration)


State 29

   17 param: type_specifier ID O_LMBRACKER O_RMBRACKER •

    $default  reduce using rule 17 (param)


State 30

   18 local_declaration: var_declaration • local_declaration

    K_INT   shift, and go to state 1
    K_VOID  shift, and go to state 2

    $default  reduce using rule 19 (local_declaration)

    var_declaration    go to state 30
    type_specifier     go to state 31
    local_declaration  go to state 33


State 31

    6 var_declaration: type_specifier • ID O_SEMI
    7                | type_specifier • ID O_LMBRACKER NUM O_RMBRACKER O_SEMI

    ID  shift, and go to state 34


State 32

    9 compound_stmt: O_LLBRACKER local_declaration • statement_list O_RLBRACKER

    K_IF         shift, and go to state 35
    K_RETURN     shift, and go to state 36
    K_WHILE      shift, and go to state 37
    ID           shift, and go to state 38
    NUM          shift, and go to state 39
    O_SEMI       shift, and go to state 40
    O_LSBRACKER  shift, and go to state 41
    O_LLBRACKER  shift, and go to state 25

    $default  reduce using rule 20 (statement_list)

    compound_stmt        go to state 42
    statement_list       go to state 43
    statement            go to state 44
    expression_stmt      go to state 45
    selection_stmt       go to state 46
    matched_if           go to state 47
    unmatched_if         go to state 48
    iteration_stmt       go to state 49
    expression           go to state 50
    return_stmt          go to state 51
    var                  go to state 52
    simple_expression    go to state 53
    additive_expression  go to state 54
    term                 go to state 55
    factor               go to state 56
    call                 go to state 57


State 33

   18 local_declaration: var_declaration local_declaration •

    $default  reduce using rule 18 (local_declaration)


State 34

    6 var_declaration: type_specifier ID • O_SEMI
    7                | type_specifier ID • O_LMBRACKER NUM O_RMBRACKER O_SEMI

    O_SEMI       shift, and go to state 12
    O_LMBRACKER  shift, and go to state 14


State 35

   31 matched_if: K_IF • O_LSBRACKER expression O_RSBRACKER statement K_ELSE statement
   32 unmatched_if: K_IF • O_LSBRACKER expression O_RSBRACKER statement
   33             | K_IF • O_LSBRACKER expression O_RSBRACKER matched_if K_ELSE unmatched_if

    O_LSBRACKER  shift, and go to state 58


State 36

   37 return_stmt: K_RETURN • expression O_SEMI
   38            | K_RETURN • O_SEMI

    ID           shift, and go to state 38
    NUM          shift, and go to state 39
    O_SEMI       shift, and go to state 59
    O_LSBRACKER  shift, and go to state 41

    expression           go to state 60
    var                  go to state 52
    simple_expression    go to state 53
    additive_expression  go to state 54
    term                 go to state 55
    factor               go to state 56
    call                 go to state 57


State 37

   34 iteration_stmt: K_WHILE • O_LSBRACKER expression O_RSBRACKER statement

    O_LSBRACKER  shift, and go to state 61


State 38

   39 var: ID •
   40    | ID • O_LMBRACKER expression O_RMBRACKER
   61 call: ID • O_LSBRACKER args O_RSBRACKER

    O_LSBRACKER  shift, and go to state 62
    O_LMBRACKER  shift, and go to state 63

    $default  reduce using rule 39 (var)


State 39

   60 factor: NUM •

    $default  reduce using rule 60 (factor)


State 40

   28 expression_stmt: O_SEMI •

    $default  reduce using rule 28 (expression_stmt)


State 41

   57 factor: O_LSBRACKER • expression O_RSBRACKER

    ID           shift, and go to state 38
    NUM          shift, and go to state 39
    O_LSBRACKER  shift, and go to state 41

    expression           go to state 64
    var                  go to state 52
    simple_expression    go to state 53
    additive_expression  go to state 54
    term                 go to state 55
    factor               go to state 56
    call                 go to state 57


State 42

   23 statement: compound_stmt •

    $default  reduce using rule 23 (statement)


State 43

    9 compound_stmt: O_LLBRACKER local_declaration statement_list • O_RLBRACKER

    O_RLBRACKER  shift, and go to state 65


State 44

   21 statement_list: statement • statement_list

    K_IF         shift, and go to state 35
    K_RETURN     shift, and go to state 36
    K_WHILE      shift, and go to state 37
    ID           shift, and go to state 38
    NUM          shift, and go to state 39
    O_SEMI       shift, and go to state 40
    O_LSBRACKER  shift, and go to state 41
    O_LLBRACKER  shift, and go to state 25

    $default  reduce using rule 20 (statement_list)

    compound_stmt        go to state 42
    statement_list       go to state 66
    statement            go to state 44
    expression_stmt      go to state 45
    selection_stmt       go to state 46
    matched_if           go to state 47
    unmatched_if         go to state 48
    iteration_stmt       go to state 49
    expression           go to state 50
    return_stmt          go to state 51
    var                  go to state 52
    simple_expression    go to state 53
    additive_expression  go to state 54
    term                 go to state 55
    factor               go to state 56
    call                 go to state 57


State 45

   22 statement: expression_stmt •

    $default  reduce using rule 22 (statement)


State 46

   24 statement: selection_stmt •

    $default  reduce using rule 24 (statement)


State 47

   29 selection_stmt: matched_if •

    $default  reduce using rule 29 (selection_stmt)


State 48

   30 selection_stmt: unmatched_if •

    $default  reduce using rule 30 (selection_stmt)


State 49

   25 statement: iteration_stmt •

    $default  reduce using rule 25 (statement)


State 50

   27 expression_stmt: expression • O_SEMI

    O_SEMI  shift, and go to state 67


State 51

   26 statement: return_stmt •

    $default  reduce using rule 26 (statement)


State 52

   35 expression: var • O_ASSIGN expression
   58 factor: var •

    O_ASSIGN  shift, and go to state 68

    $default  reduce using rule 58 (factor)


State 53

   36 expression: simple_expression •

    $default  reduce using rule 36 (expression)


State 54

   41 simple_expression: additive_expression • relop additive_expression
   42                  | additive_expression •

    O_LESS     shift, and go to state 69
    O_L_EQUAL  shift, and go to state 70
    O_GREATER  shift, and go to state 71
    O_G_EQUAL  shift, and go to state 72
    O_EQUAL    shift, and go to state 73
    O_U_EQUAL  shift, and go to state 74

    $default  reduce using rule 42 (simple_expression)

    relop  go to state 75


State 55

   49 additive_expression: term • addop additive_expression
   50                    | term •

    O_ADD  shift, and go to state 76
    O_SUB  shift, and go to state 77

    $default  reduce using rule 50 (additive_expression)

    addop  go to state 78


State 56

   53 term: factor • mulop term
   54     | factor •

    O_MUL  shift, and go to state 79
    O_DIV  shift, and go to state 80

    $default  reduce using rule 54 (term)

    mulop  go to state 81


State 57

   59 factor: call •

    $default  reduce using rule 59 (factor)


State 58

   31 matched_if: K_IF O_LSBRACKER • expression O_RSBRACKER statement K_ELSE statement
   32 unmatched_if: K_IF O_LSBRACKER • expression O_RSBRACKER statement
   33             | K_IF O_LSBRACKER • expression O_RSBRACKER matched_if K_ELSE unmatched_if

    ID           shift, and go to state 38
    NUM          shift, and go to state 39
    O_LSBRACKER  shift, and go to state 41

    expression           go to state 82
    var                  go to state 52
    simple_expression    go to state 53
    additive_expression  go to state 54
    term                 go to state 55
    factor               go to state 56
    call                 go to state 57


State 59

   38 return_stmt: K_RETURN O_SEMI •

    $default  reduce using rule 38 (return_stmt)


State 60

   37 return_stmt: K_RETURN expression • O_SEMI

    O_SEMI  shift, and go to state 83


State 61

   34 iteration_stmt: K_WHILE O_LSBRACKER • expression O_RSBRACKER statement

    ID           shift, and go to state 38
    NUM          shift, and go to state 39
    O_LSBRACKER  shift, and go to state 41

    expression           go to state 84
    var                  go to state 52
    simple_expression    go to state 53
    additive_expression  go to state 54
    term                 go to state 55
    factor               go to state 56
    call                 go to state 57


State 62

   61 call: ID O_LSBRACKER • args O_RSBRACKER

    ID           shift, and go to state 38
    NUM          shift, and go to state 39
    O_LSBRACKER  shift, and go to state 41

    $default  reduce using rule 63 (args)

    expression           go to state 85
    var                  go to state 52
    simple_expression    go to state 53
    additive_expression  go to state 54
    term                 go to state 55
    factor               go to state 56
    call                 go to state 57
    args                 go to state 86
    arg_list             go to state 87


State 63

   40 var: ID O_LMBRACKER • expression O_RMBRACKER

    ID           shift, and go to state 38
    NUM          shift, and go to state 39
    O_LSBRACKER  shift, and go to state 41

    expression           go to state 88
    var                  go to state 52
    simple_expression    go to state 53
    additive_expression  go to state 54
    term                 go to state 55
    factor               go to state 56
    call                 go to state 57


State 64

   57 factor: O_LSBRACKER expression • O_RSBRACKER

    O_RSBRACKER  shift, and go to state 89


State 65

    9 compound_stmt: O_LLBRACKER local_declaration statement_list O_RLBRACKER •

    $default  reduce using rule 9 (compound_stmt)


State 66

   21 statement_list: statement statement_list •

    $default  reduce using rule 21 (statement_list)


State 67

   27 expression_stmt: expression O_SEMI •

    $default  reduce using rule 27 (expression_stmt)


State 68

   35 expression: var O_ASSIGN • expression

    ID           shift, and go to state 38
    NUM          shift, and go to state 39
    O_LSBRACKER  shift, and go to state 41

    expression           go to state 90
    var                  go to state 52
    simple_expression    go to state 53
    additive_expression  go to state 54
    term                 go to state 55
    factor               go to state 56
    call                 go to state 57


State 69

   44 relop: O_LESS •

    $default  reduce using rule 44 (relop)


State 70

   43 relop: O_L_EQUAL •

    $default  reduce using rule 43 (relop)


State 71

   45 relop: O_GREATER •

    $default  reduce using rule 45 (relop)


State 72

   46 relop: O_G_EQUAL •

    $default  reduce using rule 46 (relop)


State 73

   47 relop: O_EQUAL •

    $default  reduce using rule 47 (relop)


State 74

   48 relop: O_U_EQUAL •

    $default  reduce using rule 48 (relop)


State 75

   41 simple_expression: additive_expression relop • additive_expression

    ID           shift, and go to state 38
    NUM          shift, and go to state 39
    O_LSBRACKER  shift, and go to state 41

    var                  go to state 91
    additive_expression  go to state 92
    term                 go to state 55
    factor               go to state 56
    call                 go to state 57


State 76

   51 addop: O_ADD •

    $default  reduce using rule 51 (addop)


State 77

   52 addop: O_SUB •

    $default  reduce using rule 52 (addop)


State 78

   49 additive_expression: term addop • additive_expression

    ID           shift, and go to state 38
    NUM          shift, and go to state 39
    O_LSBRACKER  shift, and go to state 41

    var                  go to state 91
    additive_expression  go to state 93
    term                 go to state 55
    factor               go to state 56
    call                 go to state 57


State 79

   55 mulop: O_MUL •

    $default  reduce using rule 55 (mulop)


State 80

   56 mulop: O_DIV •

    $default  reduce using rule 56 (mulop)


State 81

   53 term: factor mulop • term

    ID           shift, and go to state 38
    NUM          shift, and go to state 39
    O_LSBRACKER  shift, and go to state 41

    var     go to state 91
    term    go to state 94
    factor  go to state 56
    call    go to state 57


State 82

   31 matched_if: K_IF O_LSBRACKER expression • O_RSBRACKER statement K_ELSE statement
   32 unmatched_if: K_IF O_LSBRACKER expression • O_RSBRACKER statement
   33             | K_IF O_LSBRACKER expression • O_RSBRACKER matched_if K_ELSE unmatched_if

    O_RSBRACKER  shift, and go to state 95


State 83

   37 return_stmt: K_RETURN expression O_SEMI •

    $default  reduce using rule 37 (return_stmt)


State 84

   34 iteration_stmt: K_WHILE O_LSBRACKER expression • O_RSBRACKER statement

    O_RSBRACKER  shift, and go to state 96


State 85

   64 arg_list: expression • O_COMMA arg_list
   65         | expression •

    O_COMMA  shift, and go to state 97

    $default  reduce using rule 65 (arg_list)


State 86

   61 call: ID O_LSBRACKER args • O_RSBRACKER

    O_RSBRACKER  shift, and go to state 98


State 87

   62 args: arg_list •

    $default  reduce using rule 62 (args)


State 88

   40 var: ID O_LMBRACKER expression • O_RMBRACKER

    O_RMBRACKER  shift, and go to state 99


State 89

   57 factor: O_LSBRACKER expression O_RSBRACKER •

    $default  reduce using rule 57 (factor)


State 90

   35 expression: var O_ASSIGN expression •

    $default  reduce using rule 35 (expression)


State 91

   58 factor: var •

    $default  reduce using rule 58 (factor)


State 92

   41 simple_expression: additive_expression relop additive_expression •

    $default  reduce using rule 41 (simple_expression)


State 93

   49 additive_expression: term addop additive_expression •

    $default  reduce using rule 49 (additive_expression)


State 94

   53 term: factor mulop term •

    $default  reduce using rule 53 (term)


State 95

   31 matched_if: K_IF O_LSBRACKER expression O_RSBRACKER • statement K_ELSE statement
   32 unmatched_if: K_IF O_LSBRACKER expression O_RSBRACKER • statement
   33             | K_IF O_LSBRACKER expression O_RSBRACKER • matched_if K_ELSE unmatched_if

    K_IF         shift, and go to state 35
    K_RETURN     shift, and go to state 36
    K_WHILE      shift, and go to state 37
    ID           shift, and go to state 38
    NUM          shift, and go to state 39
    O_SEMI       shift, and go to state 40
    O_LSBRACKER  shift, and go to state 41
    O_LLBRACKER  shift, and go to state 25

    compound_stmt        go to state 42
    statement            go to state 100
    expression_stmt      go to state 45
    selection_stmt       go to state 46
    matched_if           go to state 101
    unmatched_if         go to state 48
    iteration_stmt       go to state 49
    expression           go to state 50
    return_stmt          go to state 51
    var                  go to state 52
    simple_expression    go to state 53
    additive_expression  go to state 54
    term                 go to state 55
    factor               go to state 56
    call                 go to state 57


State 96

   34 iteration_stmt: K_WHILE O_LSBRACKER expression O_RSBRACKER • statement

    K_IF         shift, and go to state 35
    K_RETURN     shift, and go to state 36
    K_WHILE      shift, and go to state 37
    ID           shift, and go to state 38
    NUM          shift, and go to state 39
    O_SEMI       shift, and go to state 40
    O_LSBRACKER  shift, and go to state 41
    O_LLBRACKER  shift, and go to state 25

    compound_stmt        go to state 42
    statement            go to state 102
    expression_stmt      go to state 45
    selection_stmt       go to state 46
    matched_if           go to state 47
    unmatched_if         go to state 48
    iteration_stmt       go to state 49
    expression           go to state 50
    return_stmt          go to state 51
    var                  go to state 52
    simple_expression    go to state 53
    additive_expression  go to state 54
    term                 go to state 55
    factor               go to state 56
    call                 go to state 57


State 97

   64 arg_list: expression O_COMMA • arg_list

    ID           shift, and go to state 38
    NUM          shift, and go to state 39
    O_LSBRACKER  shift, and go to state 41

    expression           go to state 85
    var                  go to state 52
    simple_expression    go to state 53
    additive_expression  go to state 54
    term                 go to state 55
    factor               go to state 56
    call                 go to state 57
    arg_list             go to state 103


State 98

   61 call: ID O_LSBRACKER args O_RSBRACKER •

    $default  reduce using rule 61 (call)


State 99

   40 var: ID O_LMBRACKER expression O_RMBRACKER •

    $default  reduce using rule 40 (var)


State 100

   31 matched_if: K_IF O_LSBRACKER expression O_RSBRACKER statement • K_ELSE statement
   32 unmatched_if: K_IF O_LSBRACKER expression O_RSBRACKER statement •

    K_ELSE  shift, and go to state 104

    K_ELSE    [reduce using rule 32 (unmatched_if)]
    $default  reduce using rule 32 (unmatched_if)


State 101

   29 selection_stmt: matched_if •
   33 unmatched_if: K_IF O_LSBRACKER expression O_RSBRACKER matched_if • K_ELSE unmatched_if

    K_ELSE  shift, and go to state 105

    K_ELSE    [reduce using rule 29 (selection_stmt)]
    $default  reduce using rule 29 (selection_stmt)


State 102

   34 iteration_stmt: K_WHILE O_LSBRACKER expression O_RSBRACKER statement •

    $default  reduce using rule 34 (iteration_stmt)


State 103

   64 arg_list: expression O_COMMA arg_list •

    $default  reduce using rule 64 (arg_list)


State 104

   31 matched_if: K_IF O_LSBRACKER expression O_RSBRACKER statement K_ELSE • statement

    K_IF         shift, and go to state 35
    K_RETURN     shift, and go to state 36
    K_WHILE      shift, and go to state 37
    ID           shift, and go to state 38
    NUM          shift, and go to state 39
    O_SEMI       shift, and go to state 40
    O_LSBRACKER  shift, and go to state 41
    O_LLBRACKER  shift, and go to state 25

    compound_stmt        go to state 42
    statement            go to state 106
    expression_stmt      go to state 45
    selection_stmt       go to state 46
    matched_if           go to state 47
    unmatched_if         go to state 48
    iteration_stmt       go to state 49
    expression           go to state 50
    return_stmt          go to state 51
    var                  go to state 52
    simple_expression    go to state 53
    additive_expression  go to state 54
    term                 go to state 55
    factor               go to state 56
    call                 go to state 57


State 105

   33 unmatched_if: K_IF O_LSBRACKER expression O_RSBRACKER matched_if K_ELSE • unmatched_if

    K_IF  shift, and go to state 107

    unmatched_if  go to state 108


State 106

   31 matched_if: K_IF O_LSBRACKER expression O_RSBRACKER statement K_ELSE statement •

    $default  reduce using rule 31 (matched_if)


State 107

   32 unmatched_if: K_IF • O_LSBRACKER expression O_RSBRACKER statement
   33             | K_IF • O_LSBRACKER expression O_RSBRACKER matched_if K_ELSE unmatched_if

    O_LSBRACKER  shift, and go to state 109


State 108

   33 unmatched_if: K_IF O_LSBRACKER expression O_RSBRACKER matched_if K_ELSE unmatched_if •

    $default  reduce using rule 33 (unmatched_if)


State 109

   32 unmatched_if: K_IF O_LSBRACKER • expression O_RSBRACKER statement
   33             | K_IF O_LSBRACKER • expression O_RSBRACKER matched_if K_ELSE unmatched_if

    ID           shift, and go to state 38
    NUM          shift, and go to state 39
    O_LSBRACKER  shift, and go to state 41

    expression           go to state 110
    var                  go to state 52
    simple_expression    go to state 53
    additive_expression  go to state 54
    term                 go to state 55
    factor               go to state 56
    call                 go to state 57


State 110

   32 unmatched_if: K_IF O_LSBRACKER expression • O_RSBRACKER statement
   33             | K_IF O_LSBRACKER expression • O_RSBRACKER matched_if K_ELSE unmatched_if

    O_RSBRACKER  shift, and go to state 111


State 111

   32 unmatched_if: K_IF O_LSBRACKER expression O_RSBRACKER • statement
   33             | K_IF O_LSBRACKER expression O_RSBRACKER • matched_if K_ELSE unmatched_if

    K_IF         shift, and go to state 35
    K_RETURN     shift, and go to state 36
    K_WHILE      shift, and go to state 37
    ID           shift, and go to state 38
    NUM          shift, and go to state 39
    O_SEMI       shift, and go to state 40
    O_LSBRACKER  shift, and go to state 41
    O_LLBRACKER  shift, and go to state 25

    compound_stmt        go to state 42
    statement            go to state 112
    expression_stmt      go to state 45
    selection_stmt       go to state 46
    matched_if           go to state 101
    unmatched_if         go to state 48
    iteration_stmt       go to state 49
    expression           go to state 50
    return_stmt          go to state 51
    var                  go to state 52
    simple_expression    go to state 53
    additive_expression  go to state 54
    term                 go to state 55
    factor               go to state 56
    call                 go to state 57


State 112

   32 unmatched_if: K_IF O_LSBRACKER expression O_RSBRACKER statement •

    $default  reduce using rule 32 (unmatched_if)
